PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTS: "(">
| <FPARENTS: ")">
| <VOID: "void">
| <FLOAT: "float">
| <NEWVAR: "newVar">
| <PRINTOUT: "printout">
| <TRUE: "true" >
| <FALSE: "false">
| <FUN: "fun">
| <BOOLEAN: "boolean>

}

TOKEN: 
{
  <WHILE: "while">
| <IF: "if">
| <THEN: "then">
| <RETURN: "return">
}



TOKEN :
{
  <NUM : (["0"-"9"]) + (["."])  (["0"-"9"]) + >
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>

}

TOKEN: 
{
    <ATRIBUICAO: "=" > 
}

TOKEN: 
{
    <PONTOVIRGULA: ";">
}

TOKEN:
{
  <SOMA: "+"> 
| <SUB: "-"> 
| <MULT: "*">
| <DIV: "/"> 
| <AND: "&"> 
| <OR: "|"> 
| <MAIORQUE: ">"> 
| <MENORQUE: "<"> 
| <IGUAL: "=="> 
}


void Karloff () :
{}
{
   Main() (Func())?
}

void Main() :
{}
{
  
   <VOID> <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> Vardecl() Seqcomands() <ACHAVES>

}

void Vardecl () :
// segunda regra
{}
{
   
     (<NEWVAR> Tipo() <ID> <PONTOVIRGULA>)*
   
}

void Tipo() :
{}
{

    <FLOAT> | <BOOLEAN> | <VOID>

}

void Seqcomands() :
// segunda regra
{}
{

    (Comando())* 

}

void Comando() :
{}
{

  
 
}

void Exp() :
{}
{

    <APARENTS> Exp() Op() Exp() <FPARENTS> | Fator()

}

void Fator() : 
{}
{

    <ID> | <ID> <APARENTS> (Listaexp())? <FPARENTS> | <NUM> | <TRUE> | <FALSE>

}


void Func() :
//primeira regra
{}
{
   
   (<FUN> Tipo() <ID> <APARENTS> (Listaarg())? <FPARENTS> <ACHAVES> Vardecl() Seqcomands() <FCHAVES> Funcl() <FUN> Tipo() <ID> <APARENTS> (Listaarg())? <FPARENTS> <ACHAVES> Vardecl() Seqcomands() <FCHAVES> Funcl())* 
   
}


